package pl.edu.mimuw.nesc.codesize;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Object that removes definitions of functions from assembly files generated by
 * SDCC.
 *
 * @author Micha≈Ç Ciszewski <michal.ciszewski@students.mimuw.edu.pl>
 */
final class AssemblyFunctionsRemover {
    /**
     * Regular expression whose language are labels in assembly source files.
     */
    private static final Pattern REGEXP_LABEL =
            Pattern.compile("\\s*(?<label>([A-Za-z\\._]|\\$[A-Za-z0-9\\._])[A-Za-z0-9\\.\\$_]*)\\s*:.*");

    /**
     * Path to the input assembly file.
     */
    private final String inputFile;

    /**
     * File that will be generated that does not contain definitions of
     * specified functions.
     */
    private final String outputFile;

    /**
     * Set with names of functions that will be removed from the input file if
     * they exist in it.
     */
    private final Set<String> functionsForRemoval;

    AssemblyFunctionsRemover(String inputFile, String outputFile,
            Set<String> functionsForRemoval) {
        checkNotNull(inputFile, "input file cannot be null");
        checkNotNull(outputFile, "output file cannot be null");
        checkNotNull(functionsForRemoval, "set with names of functions for removal cannot be null");
        checkArgument(!inputFile.isEmpty(), "input file cannot be an empty string");
        checkArgument(!outputFile.isEmpty(), "output file cannot be an empty string");
        checkArgument(!inputFile.equals(outputFile), "input and output files must be different");

        this.inputFile = inputFile;
        this.outputFile = outputFile;
        this.functionsForRemoval = functionsForRemoval;
    }

    /**
     * Performs the action of removal specified at construction.
     */
    public void remove() throws IOException {
        try (final Scanner scanner = new Scanner(new FileInputStream(inputFile));
             final FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            // Truncate the output file
            outputStream.getChannel().truncate(0L);

            // State necessary for the operation
            final String lineSeparator = System.getProperty("line.separator");
            boolean skipping = false;

            try (final Writer writer = new OutputStreamWriter(outputStream)) {
                while (scanner.hasNextLine()) {
                    final String line = scanner.nextLine();
                    final Matcher labelMatcher = REGEXP_LABEL.matcher(line);

                    if (labelMatcher.matches()) {
                        final String exactLabel = labelMatcher.group("label");
                        final String label = exactLabel.startsWith("_")
                                ? exactLabel.substring(1)
                                : exactLabel;
                        skipping = functionsForRemoval.contains(label);
                    }

                    if (!skipping) {
                        writer.write(line);
                        writer.write(lineSeparator);
                    }
                }
            }
        }
    }
}
